// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MillionAndUp.Diego.ApplyTest.Infrastructure.DAL.DbContexts;

namespace MillionAndUp.Diego.ApplyTest.Infrastructure.DAL.Migrations
{
    [DbContext(typeof(BookshopDbContext))]
    partial class BookshopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("MillionAndUp.Diego.ApplyTest.Domain.Entities.AuthorEntity", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("author_id")
                        .UseIdentityColumn();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("VARCHAR(45)")
                        .HasColumnName("first_name");

                    b.Property<string>("Surname")
                        .HasMaxLength(45)
                        .HasColumnType("VARCHAR(45)")
                        .HasColumnName("surname");

                    b.HasKey("AuthorId");

                    b.ToTable("authors");
                });

            modelBuilder.Entity("MillionAndUp.Diego.ApplyTest.Domain.Entities.BookEntity", b =>
                {
                    b.Property<int>("ISBN")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("isbn")
                        .UseIdentityColumn();

                    b.Property<int>("FkAuthorId")
                        .HasColumnType("int")
                        .HasColumnName("fk_author_id");

                    b.Property<int>("FkEditorialId")
                        .HasColumnType("int")
                        .HasColumnName("fk_editorial_id");

                    b.Property<int>("NumberOfPages")
                        .HasColumnType("int")
                        .HasColumnName("number_of_pages");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("synopsis");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("VARCHAR(45)")
                        .HasColumnName("title");

                    b.HasKey("ISBN");

                    b.HasIndex("FkAuthorId");

                    b.HasIndex("FkEditorialId");

                    b.ToTable("books");
                });

            modelBuilder.Entity("MillionAndUp.Diego.ApplyTest.Domain.Entities.EditorialEntity", b =>
                {
                    b.Property<int>("EditorialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("editorial_id")
                        .UseIdentityColumn();

                    b.Property<string>("Headquarter")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("VARCHAR(45)")
                        .HasColumnName("headquarter");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("VARCHAR(45)")
                        .HasColumnName("name");

                    b.HasKey("EditorialId");

                    b.ToTable("editorials");
                });

            modelBuilder.Entity("MillionAndUp.Diego.ApplyTest.Domain.Entities.BookEntity", b =>
                {
                    b.HasOne("MillionAndUp.Diego.ApplyTest.Domain.Entities.AuthorEntity", "FkAuthor")
                        .WithMany("Books")
                        .HasForeignKey("FkAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MillionAndUp.Diego.ApplyTest.Domain.Entities.EditorialEntity", "FkEditorial")
                        .WithMany("Books")
                        .HasForeignKey("FkEditorialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FkAuthor");

                    b.Navigation("FkEditorial");
                });

            modelBuilder.Entity("MillionAndUp.Diego.ApplyTest.Domain.Entities.AuthorEntity", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("MillionAndUp.Diego.ApplyTest.Domain.Entities.EditorialEntity", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
